---
description: Create comprehensive GitHub issues with proper templates and CLI integration
globs:
alwaysApply: false
---

# GitHub Issue Creation Guidelines

## **Purpose**

When a user requests creating a GitHub issue, extract relevant details, determine the appropriate issue type, and generate a properly formatted issue with GitHub CLI command for the <github-repo-name>.

## **Repository Configuration**

- **Target Repository:** `https://github.com/<github-org-name>/<github-repo-name>`
- **CLI Command Prefix:** `gh issue create --repo <github-org-name>/<github-repo-name>`

## **Issue Type Detection**

Automatically determine issue type based on user input:

- **🐛 Bug Report** - Problems, errors, crashes, unexpected behavior
- **✨ Feature Request** - New functionality, enhancements, user stories
- **📋 Task** - Development tasks, refactoring, technical debt
- **📚 Documentation** - Missing or incorrect documentation
- **🔧 Configuration** - Build system, CI/CD, project setup
- **❓ Question** - Clarifications, discussions, help requests

## **Issue Templates**

### **🐛 Bug Report Template**

```markdown
## 🐛 Problem Description

*Clear description of what's broken or not working as expected.*

## 📱 Environment

- **iOS Version:** 
- **Device:** 
- **App Version:** 
- **Xcode Version:** (if relevant)

## 🔄 Steps to Reproduce

1. 
2. 
3. 

## ✅ Expected Behavior

*What should happen instead.*

## 📸 Screenshots/Videos

*Attach visual evidence if applicable.*

## 🔍 Additional Context

*Any other relevant information, error logs, or related issues.*
```

### **✨ Feature Request Template**

```markdown
## 🎯 Goal

*What problem does this solve or what value does it provide?*

## 💡 Proposed Solution

*High-level description of the desired functionality.*

## 👥 User Story

*As a [user type], I want [goal] so that [benefit].*

## ✅ Acceptance Criteria

- [ ] 
- [ ] 
- [ ] 

## 🔗 Related Issues

*Link any related issues or dependencies.*

## 📎 Additional Context

*Mockups, examples, or reference implementations.*
```

### **📋 Task Template**

```markdown
## Problem / Goal

*A brief summary of what needs to be done and why (1–2 sentences).*

## Acceptance Criteria

*A list of high-level outcomes that define success:*

- Focus on user needs or business goals
- Avoid implementation or UI specifics
- Keep it broad enough to allow design flexibility
- Limit to 3–4 criteria per issue
- Avoid technical implementation notes. Emphasize **what** and **why**, not **how**.
```

### **📚 Documentation Template**

```markdown
## 📚 Documentation Need

*What documentation is missing or needs improvement.*

## 🎯 Target Audience

*Who will use this documentation? (developers, users, contributors)*

## 📝 Content Requirements

- [ ] 
- [ ] 
- [ ] 

## 📍 Location

*Where should this documentation live? (README, wiki, inline comments)*

## 🔗 Related Documentation

*Links to existing docs that should be updated or referenced.*
```

## **Title Guidelines**

### **Format Patterns**
- **Bug:** `[Bug] Brief description of the problem`
- **Feature:** `[Feature] Brief description of the functionality`
- **Task:** `[Task] Brief description of the work`
- **Documentation:** `[Docs] Brief description of the documentation need`

### **Best Practices**
- Keep titles under 60 characters
- Use active voice and clear language
- Avoid technical jargon in titles
- Include affected component if relevant (e.g., `[Bug] SignIn: Email validation fails`)

## **CLI Command Generation**

### **Basic Structure**
```bash
gh issue create \
  --repo <github-org-name>/<github-repo-name> \
  --title "Issue Title" \
  --body "$(cat <<'EOF'
Issue body content here
EOF
)" \
  --assignee "username"
```

## **Assignee Guidelines**
- Assign to requester if they're a team member
- Assign to domain expert for complex technical issues
- Leave unassigned for general tasks that can be picked up by any team member

## **Workflow Process**

### **1. Information Extraction**
- Parse user input for issue type, priority, and details
- Identify missing information and ask clarifying questions
- Determine appropriate template

### **2. Issue Generation**
- Select appropriate template based on issue type
- Fill in provided information
- Generate meaningful title following format guidelines
- Select relevant assignees

### **3. User Review**
Present the generated issue (title, body, assignees) and GitHub CLI command for user approval before proceeding.

### **4. Command Execution**
- Present the complete GitHub CLI command
- Explain any additional steps needed
- Provide follow-up actions (linking to related issues, notifying team members)

## **Quality Guidelines**

### **Issue Body Requirements**
- Use clear, actionable language
- Include specific acceptance criteria
- Focus on user needs and business value
- Provide sufficient context for implementation
- Link related issues and dependencies

### **Avoid Anti-patterns**
- ❌ Vague titles like "Fix login"
- ❌ Implementation details in acceptance criteria
- ❌ Duplicate issues without cross-referencing
- ❌ Missing reproduction steps for bugs
- ❌ Feature requests without user stories

### **Enhancement Opportunities**
- Reference existing code files when relevant
- Include links to design mockups or specifications
- Mention potential implementation approaches (but don't prescribe)
- Consider breaking large features into smaller issues
- Add time estimates or complexity indicators when helpful

## **Integration Notes**

- Cross-reference with existing issues using GitHub's linking syntax
- Use GitHub's auto-closing keywords when creating related PRs
- Consider creating issue templates in the repository for consistency
- Monitor issue metrics and adjust templates based on team feedback
